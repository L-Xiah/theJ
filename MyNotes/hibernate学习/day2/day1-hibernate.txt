1. JUnit4 
1.1 软件测试：
软件开中，测试是一个很重要的环节，为了保证软件的基本运行，在交付使用之前都要经过大量的测试。在一个标准的软件开发流程中，常见的测试阶段包括：单元测试、集成测试、系统测试、Alpha测试、回归测试等。

单元测试(unit-test)：对于软件模块中最小单元进行的测试，可能是一个方法，一个SQL语句的执行等等

测试用例(test-case)：为了对某个阶段的测试进行验收，通常会根据需求或功能定义一些测试用例。一般包含一些输入结果和一些预期的输出结果。测试（开发）人员根据这些测试用例，一条一条（自动化）地向给定工具中输入信息，通过检查输出结果和预期的是否一致，来验证该功能是否测试通过（可以使用）。

1.2 在Eclipse4Jee版本中导入Junit依赖
右键项目属性(properties)
  ->Java Build Path
    ->Add Library
      ->JUnit
        ->Junit4     Finish

1.3 使用Junit：
- @Before 测试函数运行之前调用
- @Test   测试函数
- @After  测试函数全部执行之后调用

2. Hibernate 
ORM - Object Relation Mapping 对象关系映射
通常，在使用各种数据库的时候(Oracle, Mysql等)，需要记住各个数据库在对不同操作行为的sql语言的处理（特性），甚至于针对每一个操作，都要写一条或多条的语句进行数据库操作。这是不符合OOP（面向对象编程）的思想的。使用ORM，对数据库之间的操作进行封装，不仅可以大大减轻对开发人员数据库学习的成本，还可以使用面向对象编程语言的特性（对接口编程和实现）。常见的ORM框架-Hibernate, MyBatis, EJB等。
ORM框架的三大特性：
- 易用性 以最基本的形式建模数据
- 传达性 数据库结构任何人都能理解
- 精确性 基于数据模型创建标准化结构

1. Hibernate
1.1 描述
- Hibernate是在Java平台上的一个开源ORM框架
- Hibernate对JDBC的一个轻量级的封装
- model层（持久化层） - 将创建的对象(JavaBean)长久地保存到数据库中

1.2 缺点
- 对于复杂的数据库语句，很难调优
- 大批量的数据更新（操作）存在问题

2. 环境配置
- Hibernate包lib中的require文件夹中的所有jar添加到build path中
- 连接数据库用的jdbc.jar添加到build path中

3. hibernate.cfg.xml
- hibernate.show_sql 是否把hibernate对应的数据库语句输出到控制台
- hibernate.formate_sql 是否格式化输出的语句
- hdm2ddl.auto 由代码生成数据库脚本的策略
  - create
  - update
  - create-drop
  - validate
- hibernate.default_schema 默认数据库表前缀
- hibernate-dialect 数据库方言，可以针对特定类型进行优化

4. hbm文件配置
4.1 <hibernate-mappaing>中字段的属性
- schema 模式配置
- catalog 目录名称
- default-cascade 级联配置
- default-access 访问策略
- default-lazy 加载策略
- package 包名

4.2 <class>中字段的属性
- name 映射的对象名
- table 映射的表名
- batch-size 抓取N条记录
- where 条件

4.3 <id>中的属性
- name Bean中对应的属性
- type Bean中对应属性的类型
- column 表中字段的名称
- length 长度
- generator 主键生成策略
  - increament 代理主键，自增
  - identity 代理主键，由数据库生成
  - sequence 代理主键，由数据库生成序列生成主键
  - native 代理主键，由数据库自动选择identity/sequence/hilo
  - assigned 自然主键，由java程序生成
  - foreign 代理主键，由另外一个关联对象的标识符生成

5. Hibernate的基本类型
Hibernate     |     Java     |     SQL
----------------------------------------------
integer/int   |  Integer/int |    INTEGER
long          |   Long/long  |    BIGINT
short         |  Short/short |    SMALLINT
byte          |   Byte/byte  |    TINYINT
float         |  Float/float |    FLOAT
double        | Double/double|    DOUBLE
big_decimal   |   BigDecimal |    NUMERIC
character     | String/char  |    CHAR(1)
string        |    String    |    VARCHAR2
boolean/yes_no|    Boolean   |    BIT
date          |util/sql.Date |    DATE
timestamp     |Date/TimeStamp|    TIMESTAMP
calendar      |   Calendar   |    TIMESTAMP
calendar_date |   Calendar   |    DATE

5.1 时间类型
date : yyyy-MM-dd (util.Date/sql.Date)
time : hh:mm:ss (util.Date/sql.Time)
timestamp : yyyyMMddhhmmss (util.Date/sql.TimeStamp)
calendar : yyyyMMddhhmmss (util.Calendar)
calendar_date : yyyy-MM-dd (util.Calendar)

5.2 对象类型
Hibernate     |     Java     |     SQL(Oracle)
----------------------------------------------
binary        |    byte[]    |     BLOB
text          |    String    |     BLOB
clob          |    sql.Clob  |     CLOB
blob          |    sql.Blob  |     BLOB

6. Hibernate中的CRUD
- 增加 session.save(obj)
- 删除 session.delete(obj)
- 修改 session.update(obj)
- 查询 
  - get(Class, 主键)
    不使用缓存的方式，调用后会立刻向数据库发出sql语句，返回持久化对象，如果数据库中不存在对应主键的对象，则返回null
  - load(Class, 主键)
    在调用后返回一个对象（只包含id），只有在使用相关属性后，才发送sql语句查询，对象不存在则会抛出org.hibernate.ObjectNotFoundException







