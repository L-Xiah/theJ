Java反射
- Class类
- 静态和动态关系
- 反射的方式获取类的信息（方法、成员变量、构造器等）
- 反射调用方法和赋值

1. Class类
1.1 不是类的元素
- 原始类型(int, long==) [包装类]
- 静态对象，不是属于某个对象，而属于类的本身

“类本身” - java.lang.Class 类的实例对象
程序中定义的每一个对象的所属类就是Class的实例。

- java.lang.Class 是所有类的类。

- Class clz = Student.class;
clz变量是Student类的类对象。
NOTE: 任意类都包含一个静态的成员变量class

1.2 如何获取某个类的类对象
- Class clz = Student.class;
- Class clz = stu.getClass();
- Class clz = Class.forName(""); // 会抛出异常

1.3 通过类对象进行实例化
clz.newInstance() 进行对类的实例化操作
NOTE: 调用的是无参的public构造方法，所以JavaBean必须拥有一个无参public的构造方法

1.4 类的类型
如int, double及其包装类都有自己的类对象（包括void和Void），但是package没有，因为它是在类之上的概念。
NOTE: java.lang.Package和package关键字是不一样的

2. 静态和动态的关系：
静态加载：程序在编译的时候就需要加载的对象
动态加载：程序在运行的时候才需要加载的对象

3. 反射：Java提供的一种动态地访问或获取类的方法或变量（属性）的一种机制。
- 方法
java.lang.reflect.Method 对象
确定函数的方式：
返回值  函数名  参数个数/类型
getDeclaredMethods() - 获取自己的方法
getMethods() - 获取public的方法

- 成员变量
java.lang.reflect.Field 对象
类型 参数名
getDeclaredFields() - 获取自己的所有变量
getFields() - 获取自己和父类的public变量 

- 构造函数
java.lang.reflect.Constructor 对象
getDeclaredConstructors() - 获取自己的所有构造
getConstructors() - 获取public构造

4. 反射调用和赋值
method.invoke(target, params...);
NOTE: 调用private方法时需要去设置setAccessible(true)否则会抛出异常

field.set(target, value);
设定private的时候需要设置setAccessible(true)

示例：
1. 定义三个方法：
 - 按照标准格式(public 类型 参数)输出成员变量
 - 按照标准格式输出方法
 - 按照标准格式输出构造器
2. 通过反射的方式进行getter/setter的调用，从而操作JavaBean